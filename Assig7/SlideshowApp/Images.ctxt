#BlueJ class context
comment0.params=
comment0.target=Images()
comment0.text=\n\ Creates\ an\ empty\ list\ of\ images.\n
comment1.params=
comment1.target=java.lang.String\ getImageFileNameAtCursor()
comment1.text=\n\ Returns\ the\ fileName\ of\ the\ image\ at\ the\ current\ cursor\ position.\n\ \n\ This\ method\ relieves\ clients\ of\ Images\ from\ knowing\ about\ image\ nodes\ and\ the\ 'getFileName()'\ method.\n
comment10.params=imageFileName
comment10.target=void\ addImageAfter(java.lang.String)
comment10.text=\n\ Adds\ an\ image\ after\ the\ cursor\ position\n\ \n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ @param\ imageFileName\ the\ file\ name\ of\ the\ image\ to\ be\ added\n\ \n\ HINT\:\ Consider\ that\ the\ current\ collection\ may\ be\ empty.\n\ HINT\:\ Create\ a\ new\ image\ node\ here\ and\ and\ delegate\ further\ work\ to\ method\ 'insertAfter'\ of\ class\ ImageNode.\n\ HINT\:\ Pay\ attention\ to\ the\ cursor\ position\ after\ the\ image\ has\ been\ added.\ \n\ \n
comment11.params=imageFileName
comment11.target=void\ addImageBefore(java.lang.String)
comment11.text=\n\ Adds\ an\ image\ before\ the\ cursor\ position\n\ \n\ For\ the\ completion\ part\ of\ the\ assignment.\n\ \n\ @param\ imageFileName\ the\ file\ name\ of\ the\ image\ to\ be\ added\n\ \n\ HINT\:\ Create\ a\ new\ image\ node\ here\ and\ then\n\ \ \ \ \ \ \ \ \ 1.\ Consider\ that\ the\ current\ collection\ may\ be\ empty.\n\ \ \ \ \ \ \ \ \ 2.\ Consider\ that\ the\ head\ may\ need\ to\ be\ adjusted.\n\ \ \ \ \ \ \ \ \ 3.\ if\ necessary,\ delegate\ further\ work\ to\ 'insertBefore'\ of\ class\ ImageNode.\n\ HINT\:\ Pay\ attention\ to\ the\ cursor\ position\ after\ the\ image\ has\ been\ added.\ \n\ \n
comment12.params=imageFileName
comment12.target=void\ addImageBefore2(java.lang.String)
comment13.params=
comment13.target=void\ removeAll()
comment13.text=\n\ Removes\ all\ images.\n\ \ \ \n\ For\ the\ core\ part\ of\ the\ assignment.\n
comment14.params=
comment14.target=void\ remove()
comment14.text=\n\ Removes\ an\ image\ at\ the\ cursor\ position\n\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ HINT\:\ Consider\ that\ the\ list\ may\ be\ empty.\n\ \n\ HINT\:\ Handle\ removing\ at\ the\ very\ start\ of\ the\ list\ in\ this\ method\ and\ \n\ delegate\ the\ removal\ of\ other\ nodes\ by\ using\ method\ 'removeNodeUsingPrevious'\ from\ class\ ImageNode.\ \n\ \n\ HINT\:\ Make\ sure\ that\ the\ cursor\ position\ after\ the\ removal\ is\ correct.\ \n
comment15.params=
comment15.target=void\ reverseImages()
comment15.text=\n\ Reverses\ the\ list\ of\ images.\n\ \n\ Can\ be\ called\ from\ outside\ this\ class,\ and\ then\ switches\ between\ using\ the\ \n\ iterative\ or\ recursive\ private\ implementations\ of\ the\ method\ depending\ on\ the\ value\ of\ a\ boolean\ field\ in\ the\ \n\ SlideshowApp\ class.\n
comment16.params=
comment16.target=void\ reverseIter()
comment16.text=\n\ Reverses\ the\ order\ of\ the\ image\ list\ iteratively,\ so\ that\ the\ last\ node\ is\ now\ the\ first\ node,\ and\ \n\ and\ the\ second-to-last\ node\ is\ the\ second\ node,\ and\ so\ on\n\ \n\ For\ the\ challenge\ part\ of\ the\ assignment.\n\ \n\ HINT\:\ Make\ sure\ there\ is\ something\ worth\ reversing\ first.\n\ HINT\:\ You\ will\ have\ to\ use\ temporary\ variables.\n\ HINT\:\ Don't\ forget\ to\ update\ the\ head\ of\ the\ list.\n
comment17.params=node
comment17.target=void\ reverseRec(ImageNode)
comment17.text=\n\ Reverses\ the\ order\ of\ this\ linked\ list\ by\ calling\ a\ recursive\ function,\ so\ that\ the\ last\ node\ is\ now\ the\ first\ node,\ and\ \n\ and\ the\ second-to-last\ node\ is\ the\ second\ node,\ and\ so\ on\n\ \n\ For\ the\ challenge\ part\ of\ the\ assignment.\n\ \n\ HINT\:\ Make\ sure\ there\ is\ something\ worth\ reversing\ first.\n\ HINT\:\ Delegate\ the\ work\ to\ a\ recursive\ method\ in\ class\ ImageNode.\n\ HINT\:\ Make\ sure\ that\ head\ has\ the\ correct\ value\ afterwards.\n
comment2.params=
comment2.target=ImageNode\ getCursor()
comment2.text=\n\ Returns\ the\ current\ cursor\ position.\n\ \n\ Used\ by\ clients\ that\ want\ to\ save\ the\ current\ selection\ in\ order\ to\ restore\ it\ after\ an\ iteration.\n
comment3.params=newCursor
comment3.target=void\ setCursor(ImageNode)
comment3.text=\n\ Sets\ the\ cursor\ to\ a\ new\ node.\n\ \n\ @param\ newCursor\ the\ new\ cursor\ position\n
comment4.params=
comment4.target=void\ moveCursorToStart()
comment4.text=\n\ Positions\ the\ cursor\ at\ the\ start\n\ \ \ \ \n\ For\ the\ core\ part\ of\ the\ assignment.\n
comment5.params=
comment5.target=void\ moveCursorToEnd()
comment5.text=\n\ Positions\ the\ cursor\ at\ the\ end\n\n\ For\ the\ core\ part\ of\ the\ assignment.\n\ \n\ HINT\:\ Consider\ the\ list\ could\ be\ empty.\ \n
comment6.params=
comment6.target=void\ moveCursorRight()
comment6.text=\n\ Moves\ the\ cursor\ position\ to\ the\ right.\ \n
comment7.params=
comment7.target=void\ moveCursorLeft()
comment7.text=\n\ Moves\ the\ cursor\ position\ to\ the\ left.\n\ \n\ Assumption\:\ 'cursor'\ points\ to\ a\ node\ in\ the\ list\!\n
comment8.params=
comment8.target=int\ count()
comment8.text=\n\ Returns\ the\ number\ of\ images\n\ \n\ @return\ number\ of\ images\n
comment9.params=
comment9.target=boolean\ isEmpty()
numComments=18
