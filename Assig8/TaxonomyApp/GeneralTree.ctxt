#BlueJ class context
comment0.params=
comment0.target=GeneralTree()
comment0.text=\n\ The\ initial\ GeneralTree\ contains\ no\ nodes,\ so\ the\ root\ is\ set\ to\ null\ to\ reflect\ this.\n
comment1.params=name
comment1.target=GeneralTreeNode\ findNode(java.lang.String)
comment1.text=\ \n\ \ Finds\ the\ node\ in\ the\ tree\ that\ contains\ the\ given\ string.\n\ \ \n\ \ @param\ name\ the\ name\ of\ the\ node\ to\ locate.\n
comment10.params=targetName
comment10.target=void\ printPathToRootFrom(java.lang.String)
comment10.text=\ \n\ \ Prints\ the\ names\ of\ all\ the\ nodes\ in\ the\ path\ from\ the\ target\ node\n\ \ to\ the\ root\ of\ the\ entire\ tree\ \n\ \ \n
comment11.params=depth
comment11.target=void\ printAllAtDepth(int)
comment11.text=\ \n\ \ Prints\ all\ the\ string\ data\ of\ all\ the\ nodes\ at\ the\ given\ depth.\ \n\ \ \n\ \ Print\ nothing\ if\ the\ depth\ >\=\ 0,\ if\ there\ are\ no\ nodes\ at\ that\ depth.\n\ \n\ \ @param\ depth\ the\ depth\ of\ the\ nodes\ that\ are\ to\ be\ printed.\ The\ root\ is\ at\ depth\ 0.\n
comment12.params=
comment12.target=void\ save()
comment12.text=\n\ \ Saves\ the\ whole\ tree\ in\ a\ file\ in\ a\ format\ that\ it\ can\ be\ loaded\ back\ in\n\ \ and\ reconstructed.\n
comment13.params=node\ ps
comment13.target=void\ saveHelper(GeneralTreeNode,\ java.io.PrintStream)
comment13.text=\n\ This\ helper\ and\ other\ methods\ pertaining\ to\ loading/saving\ could\ have\ been\ moved\n\ into\ GeneralTreeNode.\n\ Having\ them\ outside\ GeneralTreeNode\ shows\ you\ how\ you\ can\ add\ functionality\n\ without\ adding\ to\ GeneralTreeNode's\ public\ interface.\ \n
comment14.params=scan
comment14.target=void\ load(java.util.Scanner)
comment14.text=\n\ \ Constructs\ a\ new\ tree\ loaded\ from\ a\ file.\n\ \ \n\ \ This\ code\ is\ not\ very\ sophisticated.\ It\ does\ not\ cope\ with\ white\ space\ in\ node\ data.\n\ \ \n\ \ @param\ scan\ The\ scanner\ connected\ to\ the\ input\ stream\ of\ the\ file\ to\ be\ loaded\ in\ from.\ \n
comment15.params=data\ scan
comment15.target=GeneralTreeNode\ loadHelper(java.lang.String,\ java.util.Scanner)
comment16.params=
comment16.target=void\ redraw()
comment16.text=\ Redraws\ the\ whole\ tree.\n\ \n\ \ First\ step\ is\ to\ calculate\ all\ the\ locations\ of\ the\ nodes\ in\ the\ tree.\n\ \ Then\ traverse\ the\ tree\ to\ draw\ all\ the\ nodes\ and\ lines\ between\ parents\ and\ children.\n
comment2.params=newName\ parentName
comment2.target=void\ addNode(java.lang.String,\ java.lang.String)
comment2.text=\ \n\ \ Adds\ a\ new\ node\ (with\ the\ data\ string\ stored\ in\ it)\ as\ a\ child\ to\ the\ node\ identified\n\ \ with\ the\ parentName\ string\ \n\ \ \n\ \ CORE.\ \n\ \ \n\ \ HINT\:\ \ \ \n\ \ There\ are\ two\ cases\ to\ consider\:\n\ \ \n\ \ 1.\ The\ provided\ 'parentName'\ is\ null,\ indicating\ that\ a\ new\ root\ node\ is\ to\ be\ created\n\ \ that\ contains\ the\ old\ root\ as\ a\ child\n\ \ \n\ \ 2.\ The\ parentName\ is\ not\ null,\ indicating\ that\ a\ new\ node\ needs\ to\ be\ created\ and\ added\n\ \ as\ a\ child\ to\ the\ node\ identified\ by\ 'parentName'.\ Make\ sure\ to\ use\ method\ 'addChild(...)'\n\ \ from\ GeneralTreeNode.\n\ \ \n\ \ This\ method\ should\ do\ nothing\ if\ the\ 'parentName'\ is\ not\ null,\ but\ no\ node\ can\ be\ found\ with\ this\ name.\ \n\ \ \n\ \ HINT\:\ The\ new\ node\ should\ only\ be\ added\ into\ the\ tree\ if\ its\ name\ is\ unique,\ i.e.,\ doesn't\n\ \ already\ appear\ in\ the\ tree.\n\ \ \n\ \ HINT\:\ Make\ sure\ to\ use\ method\ 'addChild'\ from\ class\ GeneralTreeNode.\n\ \ \n\ \ @newName\ the\ name\ of\ the\ node\ to\ be\ added\n\ \ @param\ parentName\ the\ name\ of\ the\ intended\ parent\ node\n\ \ \n
comment3.params=targetName
comment3.target=void\ removeNode(java.lang.String)
comment3.text=\ \n\ \ Removes\ the\ node\ containing\ the\ target\ string\ \ \n\ \ \n\ \ CORE.\n\ \ \n\ \ The\ children\ of\ the\ node\ to\ be\ removed\ must\ become\ children\ of\ its\ parent.\n\ \ \n\ \ Do\ nothing\ if\ the\ node\ is\ the\ root\ node\ of\ the\ entire\ tree,\ or\ if\ target\ node\ doesn't\ exist.\n\ \ \n\ \ HINT\:\ Make\ sure\ to\ make\ use\ of\ methods\ 'remove'\ and\ 'addChildrenFromNode'\ from\ class\ GeneralTreeNode.\n\ \ \n
comment4.params=targetName\ destinationName
comment4.target=void\ moveSubtree(java.lang.String,\ java.lang.String)
comment4.text=\ \n\ \ Moves\ the\ subtree\ starting\ at\ the\ node\ containing\ 'targetName'\n\ \ to\ become\ a\ child\ of\ the\ destination\ node\n\ \ \n\ \ COMPLETION.\n\ \n\ \ Note\ that\ if\ the\ destination\ node\ is\ in\ anywhere\ in\ the\ subtree\ with\ the\ root\ 'targetNode'\ \n\ \ then\ no\ move\ operation\ must\ occur.\ \n\ \ \n\ \ HINT\:\ If\ you\ are\ struggling\ to\ implement\ the\ above\ test,\ make\ at\ least\ sure\ that\ there\ is\ no\n\ \ attempt\ to\ move\ the\ root\ of\ the\ tree.\n\ \ \n\ \ HINT\:\ Make\ sure\ to\ use\ both\ methods\ 'remove'\ and\ 'addChild'\ from\ class\ GeneralTreeNode,\ as\n\ \ moving\ means\ to\ remove\ at\ one\ place\ and\ to\ add\ at\ another\ place.\ \n\n\ \ @param\ targetName\ the\ name\ of\ the\ node\ to\ be\ moved\n\ \ @param\ destinationName\ the\ name\ of\ the\ destination\ node\ to\ which\ the\ node\ to\ be\ moved\ \n\ \ should\ be\ added\ as\ a\ new\ child\n
comment5.params=target1\ target2
comment5.target=java.lang.String\ findClosestCommonAncestor(java.lang.String,\ java.lang.String)
comment5.text=\ \n\ Given\ two\ nodes\ names\ returns\ the\ string\ at\ a\ third\ node\ that\ is\ the\ closest\n\ common\ ancestor\ of\ the\ nodes\ identified\ by\ the\ two\ node\ names\n\ \n\ CHALLENGE.\n\ \n\ The\ closest\ common\ ancestor\ is\ the\ node\ that\ is\ the\ root\ of\ the\ smallest\ subtree\n\ that\ contains\ both\ the\ first\ two\ nodes.\ The\ closest\ common\ ancestor\ could\ even\ be\n\ one\ of\ the\ first\ two\ nodes\ identified\ by\ the\ parameters.\ Note\ that\ this\ can\ only\ \n\ return\ null\ if\ one\ of\ the\ targets\ doesn't\ exist,\ as\ the\ tree's\ root\ node\ is\ the\n\ last\ resort\ as\ a\ common\ ancestor\ to\ all\ nodes\ in\ the\ tree.\n\ \n\ HINT\:\ You\ may\ find\ it\ easier\ to\ implement\ the\ algorithm\ here\ completely,\n\ instead\ of\ trying\ to\ delegate\ to\ GeneralTreeNode.\n\ \n\ @param\ target1\ \ \ the\ (assumed\ unique)\ string\ in\ the\ first\ node.\n\ @param\ target2\ \ \ the\ (assumed\ unique)\ string\ in\ the\ second\ node.\ \n\ @return\ the\ string\ data\ at\ the\ closest\ common\ ancestor\ node,\n\ \ \ \ \ \ \ \ \ or\ null\ if\ one\ or\ both\ of\ the\ parameter's\ target\ nodes\ don't\ exist.\n
comment6.params=
comment6.target=void\ calculateLocations()
comment6.text=\ \n\ Calculates\ locations\ for\ each\ node\ in\ the\ tree\n\ \n\ \ CHALLENGE.\n\ \ \n\ \ This\ below\ version,\ along\ with\ its\ supporting\ methods,\ does\ not\ do\ a\ nice\ job\n\ \ -\ it\ just\ lays\ out\ all\ the\ nodes\ on\ each\ level\ evenly\ across\ the\ width\ of\ the\ window.\n\ \ It\ also\ assumes\ that\ the\ depth\ of\ the\ tree\ is\ at\ most\ 100.\ \n\ \ \n\ \ To\ complete\ the\ challenge\ stage,\ implement\ a\ visually\ more\ appealing\ version\n\ \ of\ the\ below\ locations\ calculation.\ \n
comment7.params=node\ depth\ widths
comment7.target=void\ computeWidths(GeneralTreeNode,\ int,\ int[])
comment7.text=\ \n\ Computes\ the\ number\ of\ nodes\ at\ each\ level\ of\ the\ tree,\n\ by\ accumulating\ the\ count\ in\ the\ widths\ array\ \n
comment8.params=node\ depth\ nextPos\ separations
comment8.target=void\ setLocations(GeneralTreeNode,\ int,\ int[],\ int[])
comment8.text=\ \n\ Sets\ the\ location\ of\ each\ node\ at\ each\ level\ of\ the\ tree,\n\ using\ the\ depth\ and\ positions\n
comment9.params=targetName
comment9.target=void\ printSubtreeFrom(java.lang.String)
comment9.text=\ \n\ \ Prints\ the\ strings\ of\ all\ the\ nodes\ under\ the\ given\ target\ node\ \n\ \ (including\ the\ target\ node\ itself)\n\ \ \n\ \ @param\ target\ the\ name\ of\ the\ node\ to\ start\ printing\ from.\ \n\ \ \n\ \ \n
numComments=17
