#BlueJ class context
comment0.params=
comment0.target=WordCloud()
comment0.text=\ Constructs\ a\ WordCloud\ object\n\ \ Set\ up\ the\ graphical\ user\ interface,\ and\ call\ the\ basic\ method.\n
comment1.params=filename
comment1.target=java.util.Map\ buildHistogram(java.lang.String)
comment1.text=\ Read\ the\ contents\ of\ a\ file,\ counting\ how\ often\ each\ word\ occurs.\n\ \ Put\ the\ counts\ (as\ Doubles)\ into\ a\ Map,\ which\ is\ returned.\n\ \ [CORE]\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=java.util.Set\ findAllWords()
comment2.text=\ Construct\ and\ return\ a\ Set\ of\ all\ the\ words\ that\ occur\ in\ EITHER\n\ \ document.\n\ \ [CORE]\n
comment3.params=
comment3.target=void\ displayWords()
comment3.text=\ Display\ words\ that\ exist\ in\ both\ documents.\n\ \ \n\ \ The\ x-position\ is\ essentially\ random\ (it\ just\ depends\ on\ the\ order\ in\n\ \ which\ an\ iterator\ goes\ through\ a\ Set).\n\ \ \n\ \ However\ the\ y-position\ reflects\ how\ much\ the\ word\ is\ used\ in\ the\ 1st\n\ \ document\ versus\ the\ 2nd.\ That\ is,\ a\ word\ that\ is\ common\ in\ the\ 1st\ and\n\ \ uncommon\ in\ the\ second\ should\ appear\ at\ the\ top.\n\ \ \n\ \ The\ SIZE\ of\ the\ word\ as\ displayed\ reflects\ how\ common\ the\ word\ is\n\ \ overall,\ including\ its\ count\ over\ BOTH\ documents.\n\ \ NB\!\ There\ is\ UI.setFontSize\ method\ that\ may\ come\ in\ useful\!\n\ \ \n\ \ [CORE]\n
comment4.params=size
comment4.target=void\ setFont(double)
comment5.params=wc\ words
comment5.target=void\ removeWords(java.util.Map,\ java.util.Set)
comment5.text=\ Take\ a\ word\ count\ Map,\ and\ a\ Set\ of\ words.\ Remove\ those\ words\ from\ the\n\ \ Map.\n\ \ [COMPLETION]\n
comment6.params=c\ limitNumWords
comment6.target=void\ removeInfrequentWords(java.util.Map,\ int)
comment6.text=\ Takes\ a\ Map\ from\ strings\ to\ integers,\ and\ an\ integer,\n\ limitNumWords.\ It\ should\ leave\ this\ Map\ containing\ only\ the\n\ limitNumWords\ most\ common\ words\ in\ the\ original.\n\ [COMPLETION]\n
comment7.params=counts
comment7.target=void\ normaliseCounts(java.util.Map)
comment7.text=\ Take\ a\ Map\ from\ words\ to\ counts,\ and\ "normalise"\ the\ counts,\n\ \ so\ that\ they\ are\ fractions\ of\ the\ total\:\ they\ should\ sum\ to\ one.\n
comment8.params=counts
comment8.target=void\ printcounts(java.util.Map)
comment8.text=\ Print\ the\ words\ and\ their\ counts\ to\ standard\ out.\n\ \ Not\ necessary\ to\ the\ program,\ but\ might\ be\ useful\ for\ debugging\n
comment9.params=button
comment9.target=void\ buttonPerformed(java.lang.String)
comment9.text=Respond\ to\ button\ presses
numComments=11
