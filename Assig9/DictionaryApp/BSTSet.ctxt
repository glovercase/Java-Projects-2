#BlueJ class context
comment0.params=
comment0.target=boolean\ isEmpty()
comment0.text=\n\ Returns\ true\ if\ the\ set\ is\ empty\ \n
comment1.params=
comment1.target=int\ size()
comment1.text=\n\ Returns\ the\ number\ of\ elements\ in\ set\ \n
comment10.params=
comment10.target=void\ testing()
comment11.params=
comment11.target=void\ printAll()
comment2.params=item
comment2.target=boolean\ contains(java.lang.Comparable)
comment2.text=\ \n\ Returns\ true\ if\ the\ set\ contains\ 'item'\n\ \n\ CORE\n\n\ HINT\:\ There\ is\ no\ need\ to\ search\ for\ 'null'\ arguments.\ \n\ \n\ HINT\:\ After\ checking\ special\ cases,\ delegate\ the\ work\ to\ the\ root\n\ node\ of\ the\ supporting\ tree.\ \n\n@param\ item\ -\ the\ item\ to\ check\ for\n\n
comment3.params=item
comment3.target=boolean\ add(java.lang.Comparable)
comment3.text=\ \n\ Adds\ the\ specified\ element\ to\ the\ set,\ as\ long\ as\ it\ is\ not\ \n\ null\ or\ is\ not\ already\ in\ the\ set.\ \n\ \n\ CORE\n\ \n\ HINT\:\ Remember\ to\ update\ the\ count\ field\ as\ well.\ \n\ \n\ HINT\:\ You\ can\ check\ whether\ the\ item\ exists\ already\ in\ an\ extra\ step\n\ or\ perform\ the\ checking\ while\ attempting\ to\ add\ the\ item.\ The\ latter\ is\n\ more\ efficient.\n\ \n\ @param\ item\ -\ the\ item\ to\ be\ added\n\ \n\ @returns\ true\ if\ the\ collection\ changes,\ and\ false\ if\ it\ does\ not\ change.\ \n\ \n
comment4.params=
comment4.target=int\ height()
comment4.text=\ \n\ Returns\ the\ height\ of\ the\ tree.\ \n\ \n\ CORE\n\ \n\ HINT\:\ You\ probably\ want\ to\ make\ use\ of\ method\ 'height()'\ in\ \n\ class\ BSTNode.\n\ \n\ @returns\ the\ height\ of\ the\ tree\ \n\ -1\ if\ the\ tree\ is\ empty,\n\ 0\ if\ there\ is\ just\ a\ root\ node,\ and\n\ greater\ than\ 0\ in\ all\ other\ cases.\n\ \n
comment5.params=
comment5.target=int\ minDepth()
comment5.text=\ \n\ \n\ Returns\ the\ minimum\ depth\ of\ the\ tree.\ \n\ \n\ COMPLETION\ \ \n\ \n\ HINT\:\ You\ probably\ want\ to\ make\ use\ of\ method\ 'minDepth()'\ in\ \n\ class\ BSTNode.\n\ \n\ @returns\ the\ length\ of\ the\ shortest\ branch\ in\ the\ tree\ \n\ -1\ if\ the\ tree\ is\ empty,\n\ 0\ if\ there\ is\ just\ a\ root\ node,\ and\n\ greater\ than\ 0\ in\ all\ other\ cases.\n\ \n
comment6.params=item
comment6.target=boolean\ remove(java.lang.Comparable)
comment6.text=\ \n\ \ Removes\ the\ element\ matching\ a\ given\ item.\ \n\ \ \n\ \ COMPLETION\n\ \ \n\ \ Note\ that\ any\ children\ of\ the\ removed\ node\ must\ be\ kept\ in\ the\ tree.\ \n\ \ \n\ \ HINT\:\ Remember\ to\ update\ the\ count\ field,\ if\ necessary.\n\ \ HINT\:\ A\ null\ item\ need\ not\ be\ removed.\n\ \ HINT\:\ You\ may\ use\ 'remove(...)'\ from\ class\ BSTNode\ as\ a\ helper,\n\ \ but\ you\ do\ not\ have\ to.\ \n\ \ \n\ \ @param\ item\ -\ the\ item\ to\ remove\n\ \ @returns\ true\ if\ the\ collection\ changes,\ and\ false\ if\ it\ did\ not\ change.\ \n
comment7.params=
comment7.target=java.util.Iterator\ iterator()
comment7.text=\ \n\ @returns\ an\ iterator\ over\ the\ elements\ in\ this\ set.\ \n
comment8.params=stream
comment8.target=void\ printAllToStream(java.io.PrintStream)
comment8.text=\n\ Prints\ all\ the\ elements\ to\ a\ stream.\n\ \n\ @param\ stream\ -\ the\ output\ stream\ \n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
numComments=12
